name: Frontend CI

on:
  push:
    branches: [main]
    paths:
      - 'src/web/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/web/**'
      - '.github/workflows/frontend-ci.yml'
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8.x'
  WORKING_DIRECTORY: 'src/web'

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/pnpm-lock.yaml

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm lint
        
      - name: Run TypeScript type checking
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm typecheck

      - name: Check code formatting
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm prettier --check "src/**/*.{ts,tsx}"

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/pnpm-lock.yaml

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm install --frozen-lockfile

      - name: Run Jest tests with coverage
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm test:coverage

      - name: Run E2E tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm test:e2e

      - name: Run accessibility tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm test:a11y

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: ${{ env.WORKING_DIRECTORY }}/coverage
          retention-days: 7

  build:
    name: Production Build
    needs: [lint, test]
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/pnpm-lock.yaml

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm install --frozen-lockfile

      - name: Build application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm build

      - name: Analyze bundle size
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: pnpm analyze

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: ${{ env.WORKING_DIRECTORY }}/dist
          retention-days: 7