name: Release Management

on:
  push:
    tags:
      - 'v*'

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8.x'

jobs:
  prepare_release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      changelog: ${{ steps.generate_changelog.outputs.changelog }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # v3
        with:
          fetch-depth: 0

      - name: Validate version format
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$ ]]; then
            echo "Invalid version format. Must follow semantic versioning"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: generate_changelog
        uses: actions/github-script@v6
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 2
            });
            const previousTag = releases.length > 1 ? releases[1].tag_name : '';
            const changelog = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
              previous_tag_name: previousTag
            });
            return changelog.data.body;

      - name: Create GitHub Release
        uses: actions/create-release@v1 # v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body: ${{ steps.generate_changelog.outputs.changelog }}
          draft: false
          prerelease: false

  security_validation:
    name: Security Validation
    needs: prepare_release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run backend security scan
        uses: ./.github/workflows/security-scan.yml
        with:
          scan_target: backend
          severity_threshold: high

      - name: Run frontend security scan
        uses: ./.github/workflows/security-scan.yml
        with:
          scan_target: frontend
          severity_threshold: high

      - name: Run compliance check
        run: |
          # Implement compliance validation based on requirements
          echo "Running compliance checks..."
          # Add compliance validation logic here

      - name: Generate security report
        run: |
          echo "Security Validation Report" > security-report.md
          echo "=========================" >> security-report.md
          echo "Version: ${{ needs.prepare_release.outputs.version }}" >> security-report.md
          echo "Timestamp: $(date -u)" >> security-report.md
          # Add more security report details

  publish_images:
    name: Build and Publish Images
    needs: [prepare_release, security_validation]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2 # v2

      - name: Login to Docker Registry
        uses: docker/login-action@v2 # v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4 # v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/web-scraping-platform
          tags: |
            type=semver,pattern={{version}}
            type=sha

      - name: Build and push backend image
        uses: docker/build-push-action@v4 # v4
        with:
          context: ./src/backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/backend:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/backend:buildcache,mode=max

  deploy_staging:
    name: Deploy to Staging
    needs: [prepare_release, publish_images]
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2 # v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy to staging
        run: |
          # Deploy to staging environment
          kubectl apply -f infrastructure/kubernetes/staging/
          
          # Wait for deployment to complete
          kubectl rollout status deployment/backend-deployment -n staging
          kubectl rollout status deployment/frontend-deployment -n staging

      - name: Run integration tests
        run: |
          # Execute integration test suite
          npm run test:integration
          
      - name: Validate deployment
        run: |
          # Implement deployment validation checks
          echo "Validating deployment..."
          # Add validation logic here

  deploy_production:
    name: Deploy to Production
    needs: [deploy_staging]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Initialize canary deployment
        run: |
          # Create canary deployment
          kubectl apply -f infrastructure/kubernetes/production/canary/
          
          # Set initial traffic weight
          kubectl patch svc backend-service -p '{"spec":{"trafficPolicy":{"canary":{"weight":10}}}}'

      - name: Monitor canary metrics
        run: |
          # Monitor error rates, latency, and other metrics
          curl -X POST ${DATADOG_API_KEY} \
            -H "Content-Type: application/json" \
            -d '{"query":"avg:http.error_rate{environment:production,deployment:canary}"}'

      - name: Gradual traffic shift
        run: |
          # Gradually increase traffic to new version
          for weight in 25 50 75 100; do
            # Update traffic weight
            kubectl patch svc backend-service -p "{\"spec\":{\"trafficPolicy\":{\"canary\":{\"weight\":$weight}}}}"
            
            # Wait and monitor metrics
            sleep 300
            
            # Validate metrics
            if ! ./scripts/validate-deployment-metrics.sh; then
              # Trigger rollback if metrics are unhealthy
              ./scripts/rollback.sh
              exit 1
            fi
          done

      - name: Finalize deployment
        if: success()
        run: |
          # Remove canary deployment
          kubectl delete -f infrastructure/kubernetes/production/canary/
          
          # Update main deployment
          kubectl apply -f infrastructure/kubernetes/production/

      - name: Notify deployment status
        if: always()
        run: |
          curl -X POST ${SLACK_WEBHOOK} \
            -H "Content-Type: application/json" \
            -d "{\"text\":\"Production deployment ${{ job.status }}: Version ${{ needs.prepare_release.outputs.version }}\"}"