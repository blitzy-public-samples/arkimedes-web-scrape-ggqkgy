name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/backend/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/backend/**'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.5.1'
  MIN_COVERAGE_THRESHOLD: 90
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}

jobs:
  code_quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required for SonarQube analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64
          cache: 'pip'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - --version ${{ env.POETRY_VERSION }}
          poetry config virtualenvs.create false

      - name: Install dependencies
        working-directory: src/backend
        run: poetry install

      - name: Run black code formatter
        working-directory: src/backend
        run: poetry run black --check .

      - name: Run isort import sorter
        working-directory: src/backend
        run: poetry run isort --check-only --diff .

      - name: Run mypy type checker
        working-directory: src/backend
        run: poetry run mypy .

      - name: Run flake8 linter
        working-directory: src/backend
        run: poetry run flake8 .

      - name: Run SonarQube analysis
        uses: sonarsource/sonarqube-scan-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=web-scraping-platform-backend
            -Dsonar.python.version=${{ env.PYTHON_VERSION }}
            -Dsonar.sources=src/backend/src
            -Dsonar.tests=src/backend/tests
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.python.xunit.reportPath=test-results/junit.xml

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python - --version ${{ env.POETRY_VERSION }}
          poetry config virtualenvs.create false

      - name: Install dependencies
        working-directory: src/backend
        run: poetry install

      - name: Run pytest with coverage
        working-directory: src/backend
        run: |
          poetry run pytest \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=test-results/junit.xml \
            tests/

      - name: Verify coverage meets threshold
        working-directory: src/backend
        run: |
          coverage_percentage=$(poetry run coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
          if (( $(echo "$coverage_percentage < ${{ env.MIN_COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "Coverage ($coverage_percentage%) is below minimum threshold (${{ env.MIN_COVERAGE_THRESHOLD }}%)"
            exit 1
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            src/backend/coverage.xml
            src/backend/htmlcov
          retention-days: 14

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: src/backend/test-results
          retention-days: 14

  security_scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run Snyk security scan
        uses: snyk/actions/python@v3
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --severity-threshold=high

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@v0.11.0
        with:
          scan-type: 'fs'
          scan-ref: 'src/backend'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-results
          path: |
            trivy-results.sarif
          retention-days: 30

  build_and_push:
    name: Build and Push Container
    needs: [code_quality, test, security_scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: src/backend
          file: src/backend/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/backend:latest
            ${{ env.DOCKER_REGISTRY }}/backend:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/backend:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/backend:buildcache,mode=max

      - name: Scan built image
        uses: aquasecurity/trivy-action@v0.11.0
        with:
          image-ref: '${{ env.DOCKER_REGISTRY }}/backend:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload image scan results
        uses: actions/upload-artifact@v3
        with:
          name: image-scan-results
          path: trivy-image-results.sarif
          retention-days: 30