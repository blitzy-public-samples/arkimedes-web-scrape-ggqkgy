apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: app
  labels:
    app: web-scraper
    component: backend
    version: latest
    environment: production
  annotations:
    description: "Web Scraping Platform Backend Service"
    maintainer: "DevOps Team"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: web-scraper
      component: backend
  template:
    metadata:
      labels:
        app: web-scraper
        component: backend
        version: latest
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8000"
        checksum/config: "${CONFIG_CHECKSUM}"
        security.policy/version: "v1.0"
    spec:
      containers:
      - name: backend
        image: web-scraper/backend:latest
        imagePullPolicy: Always
        env:
        - name: APP_NAME
          value: "web-scraper-backend"
        - name: API_V1_PREFIX
          value: "/api/v1"
        - name: LOG_LEVEL
          value: "INFO"
        - name: METRICS_ENABLED
          value: "true"
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        resources:
          requests:
            cpu: "500m"
            memory: "512Mi"
          limits:
            cpu: "2"
            memory: "2Gi"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 15
          periodSeconds: 15
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 30
        volumeMounts:
        - name: data
          mountPath: /app/data
          readOnly: false
        - name: logs
          mountPath: /app/logs
          readOnly: false
        - name: config
          mountPath: /app/config
          readOnly: true
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: backend-data
      - name: logs
        emptyDir: {}
      - name: config
        configMap:
          name: backend-config
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups:
        - 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: web-scraper
                  component: backend
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 60
      dnsPolicy: ClusterFirst
      restartPolicy: Always